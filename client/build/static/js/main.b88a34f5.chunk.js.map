{"version":3,"sources":["AskQuestion.js","PostAnswer.js","Question.js","Questions.js","App.js","index.js"],"names":["AskQuestion","props","API_URL","process","state","title","desc","event","this","setState","target","name","value","fetch","headers","method","mode","body","JSON","stringify","response","json","data","console","log","placeholder","onChange","type","onClick","_","onSubmit","Component","PostAnswer","id","answer","autoComplete","Question","submitAnswer","vote","answerId","question","getQuestion","displayAnswers","answers","map","className","text","votes","updateVote","_id","submit","clicked","Questions","list","d","key","Math","random","to","App","questions","getQuestions","comments","newQuestion","length","find","x","unshift","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b88a34f5.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass AskQuestion extends Component {\n    API_URL = process.env.REACT_APP_API_URL;\n    constructor(props) {\n        super(props);\n        this.state = {\n            title: \"\",\n            desc: \"\"\n        }\n    }\n\n    onChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    async onSubmit() {\n        let response = await fetch(`${this.API_URL}/askquestion`, {\n        headers: {\n            'Content-Type': 'application/json'\n        },    \n        method: 'PUT',\n            mode: 'cors',\n            body: JSON.stringify({\n                title: this.state.title,\n                desc: this.state.desc\n            })\n        })\n        const data = await response.json();\n        console.log(\"Answer: \", data)\n    }\n\n    render() {\n        return (\n            <>\n                <input placeholder=\"Write a title here\" name=\"title\" onChange={event => this.onChange(event)} type=\"text\"/>\n                <input placeholder=\"Write a question here\" name=\"desc\" onChange={event => this.onChange(event)} type=\"text\"/>\n                <button onClick={_ => this.onSubmit()}>Ask Question</button>\n            </>\n        )\n    }\n}\n\nexport default AskQuestion;\n","import React, {Component} from 'react';\n\nclass PostAnswer extends Component {\n    API_URL = process.env.REACT_APP_API_URL;\n    constructor(props) {\n        super(props);\n        this.state = {\n        }\n    }\n\n    onChange(event) {\n        this.setState({\n            id: this.props.data,\n            [event.target.name]: event.target.value\n        })\n    }\n\n    async onSubmit() {\n        let response = await fetch(`${this.API_URL}/questions/${this.state.id}`, {\n        headers: {\n            'Content-Type': 'application/json'\n        },    \n        method: 'PUT',\n            mode: 'cors',\n            body: JSON.stringify({\n                id: this.state.id,\n                answer: this.state.answer\n            })\n        })\n        const data = await response.json();\n        console.log(\"Here's the response: \", data)\n    }\n\n    render() {\n        return (\n            <>\n                <h3>Comments</h3>\n                <input autoComplete=\"off\" name=\"answer\" onChange={event => this.onChange(event)} type=\"text\"/>\n                <button onClick={_ => this.onSubmit()}>Send Answer</button>\n            </>\n        );\n    }\n}\n\nexport default PostAnswer;\n\n","import React, {Component} from 'react';\nimport PostAnswer from \"./PostAnswer\";\n\nclass Question extends Component {\n    API_URL = process.env.REACT_APP_API_URL;\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: this.props.id,\n        }\n    }\n\n    submit(answer){\n        this.setState({\n            answer: answer\n        }, () => {\n            this.props.submitAnswer(this.state.answer, this.state.id)\n        });\n    }\n\n    async updateVote(id, vote){\n        let response = await fetch(`${this.API_URL}/vote`, {\n        headers: {\n            'Content-Type': 'application/json'\n        },    \n        method: 'PUT',\n            mode: 'cors',\n            body: JSON.stringify({\n                answerId: id,\n                vote: vote\n            })\n        })\n        const data = await response.json();\n        console.log(\"Here's the response: \", data)\n    }\n    \n    render() {\n        const id = this.props.id;\n        const question = this.props.getQuestion(id);\n        const answers = question.answers;\n\n        const displayAnswers = answers.map(answer => \n        <div className=\"comment\">{answer.text}\n            <span className=\"votes\">Votes: {answer.votes}</span>\n            <button onClick={() => { this.updateVote(answer._id, \"up\") }} className=\"btn\">Upvote</button>\n            <button onClick={() => { this.updateVote(answer._id, \"down\") }} className=\"btn\">Downvote</button>\n        </div>)\n        \n        return (\n            <>\n                <h1>{question.text}</h1>\n                <p>{question.desc}</p>\n                <PostAnswer data={this.state.id} submit={(answer, id) => this.submit(answer, id)} onClick={_ => this.clicked()}></PostAnswer>\n                {displayAnswers}\n            </>\n        );\n    }\n}\n\nexport default Question;\n\n","import React, {Component} from 'react';\nimport { Link } from \"@reach/router\";\n\nclass Questions extends Component {\n    \n    render() {\n        let questions = this.props.data;\n        const list = questions.map((d) => <Link  key={Math.random()} to={\"/question/\"+d._id}><li>{d.text}</li></Link>);\n\n        return (\n            <>\n                <h3>All questions</h3>\n                <ul>\n                    {list}\n                </ul>\n            </>\n        );\n    }\n}\n\nexport default Questions;\n\n","import React, {Component} from 'react';\nimport { Router, Link } from \"@reach/router\";\nimport AskQuestion from './AskQuestion';\nimport Question from './Question';\nimport Questions from './Questions';\nimport './style.css'\n\nclass App extends Component {\n    API_URL = process.env.REACT_APP_API_URL;\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            questions: []\n        }\n    }\n\n    componentDidMount(){\n        this.getQuestions()\n    }\n\n    async getQuestions(){\n        let response = await fetch(`${this.API_URL}/questions`)\n        let data = await response.json()\n        this.setState({\n            questions: data\n        })\n    }\n\n    submit(title, desc, comments) {\n        let last = this.state.questions[this.state.questions.length -1]\n        const newQuestion = {\n            id: last.id + 1,\n            title: title,\n            question: desc,\n            comments: comments\n        };\n        this.setState({\n            questions: [...this.state.questions, newQuestion]\n        })\n    }\n\n    getQuestion(id) {\n        const findFunction = questions => questions._id === id; \n        return this.state.questions.find(findFunction)\n    }\n\n    submitAnswer(answer, id){\n        let state = this.state.questions\n        let element = state.find(x=>x.id === id)\n        element.comments.unshift(answer);\n    }\n\n    render() {\n        return (\n            <>\n            <nav>\n                <ul>\n                    <Link to=\"/\"><li key=\"home\">Home</li></Link>\n                    <Link to=\"/\"><li key =\"questions\">Questions</li></Link>\n                    <Link to=\"/ask\"><li key=\"ask\">Ask a question</li></Link>\n                </ul>\n            </nav>\n                <Router>\n                  <AskQuestion path=\"/ask\" submit={(title, desc, comments) => this.submit(title, desc, comments)}></AskQuestion>\n                  <Question path=\"/question/:id\" getQuestion={(id) => this.getQuestion(id)} submitAnswer={(answer, id) => this.submitAnswer(answer, id)}></Question>\n                  <Questions path=\"/\" data={this.state.questions}></Questions>\n                </Router>\n\n            </>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}